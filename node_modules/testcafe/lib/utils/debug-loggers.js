"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testRunControllerLogger = exports.requestPipelineContextLogger = exports.requestPipelineOtherRequestLogger = exports.requestPipelineServiceRequestLogger = exports.requestPipelineInternalRequestLogger = exports.requestPipelineMockLogger = exports.requestHooksEventProviderLogger = exports.chromeBrowserProviderLogger = exports.resourceInjectorLogger = exports.requestPipelineLogger = exports.nativeAutomationLogger = void 0;
const debug_1 = __importDefault(require("debug"));
const testcafeLogger = (0, debug_1.default)('testcafe');
const nativeAutomationLogger = testcafeLogger.extend('native-automation');
exports.nativeAutomationLogger = nativeAutomationLogger;
const requestPipelineLogger = nativeAutomationLogger.extend('request-pipeline');
exports.requestPipelineLogger = requestPipelineLogger;
const requestPipelineContextLogger = requestPipelineLogger.extend('context');
exports.requestPipelineContextLogger = requestPipelineContextLogger;
const requestPipelineMockLogger = requestPipelineLogger.extend('mock');
exports.requestPipelineMockLogger = requestPipelineMockLogger;
const requestPipelineInternalRequestLogger = requestPipelineLogger.extend('internal-request');
exports.requestPipelineInternalRequestLogger = requestPipelineInternalRequestLogger;
const requestPipelineServiceRequestLogger = requestPipelineLogger.extend('service-request');
exports.requestPipelineServiceRequestLogger = requestPipelineServiceRequestLogger;
const requestPipelineOtherRequestLogger = requestPipelineLogger.extend('other-request');
exports.requestPipelineOtherRequestLogger = requestPipelineOtherRequestLogger;
const resourceInjectorLogger = nativeAutomationLogger.extend('resource-injector');
exports.resourceInjectorLogger = resourceInjectorLogger;
const requestHooksLogger = nativeAutomationLogger.extend('request-hooks');
const requestHooksEventProviderLogger = requestHooksLogger.extend('event-provider');
exports.requestHooksEventProviderLogger = requestHooksEventProviderLogger;
const browserLogger = testcafeLogger.extend('browser');
const browserProviderLogger = browserLogger.extend('provider');
const chromeBrowserProviderLogger = browserProviderLogger.extend('chrome');
exports.chromeBrowserProviderLogger = chromeBrowserProviderLogger;
const runnerLogger = testcafeLogger.extend('runner');
const testRunControllerLogger = runnerLogger.extend('test-run-controller');
exports.testRunControllerLogger = testRunControllerLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWctbG9nZ2Vycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9kZWJ1Zy1sb2dnZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUUxQixNQUFNLGNBQWMsR0FBRyxJQUFBLGVBQUssRUFBQyxVQUFVLENBQUMsQ0FBQztBQUV6QyxNQUFNLHNCQUFzQixHQUFpQixjQUFjLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFvQnBGLHdEQUFzQjtBQW5CMUIsTUFBTSxxQkFBcUIsR0FBa0Isc0JBQXNCLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFvQjNGLHNEQUFxQjtBQW5CekIsTUFBTSw0QkFBNEIsR0FBVyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7QUEyQmpGLG9FQUE0QjtBQTFCaEMsTUFBTSx5QkFBeUIsR0FBYyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7QUFzQjlFLDhEQUF5QjtBQXJCN0IsTUFBTSxvQ0FBb0MsR0FBRyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQXNCMUYsb0ZBQW9DO0FBckJ4QyxNQUFNLG1DQUFtQyxHQUFJLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBc0J6RixrRkFBbUM7QUFyQnZDLE1BQU0saUNBQWlDLEdBQU0scUJBQXFCLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBc0J2Riw4RUFBaUM7QUFyQnJDLE1BQU0sc0JBQXNCLEdBQWlCLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBZTVGLHdEQUFzQjtBQWQxQixNQUFNLGtCQUFrQixHQUFxQixzQkFBc0IsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDNUYsTUFBTSwrQkFBK0IsR0FBUSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQWVyRiwwRUFBK0I7QUFibkMsTUFBTSxhQUFhLEdBQWlCLGNBQWMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDckUsTUFBTSxxQkFBcUIsR0FBUyxhQUFhLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JFLE1BQU0sMkJBQTJCLEdBQUcscUJBQXFCLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBVXZFLGtFQUEyQjtBQVIvQixNQUFNLFlBQVksR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRXJELE1BQU0sdUJBQXVCLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBYXZFLDBEQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1Zyc7XG5cbmNvbnN0IHRlc3RjYWZlTG9nZ2VyID0gZGVidWcoJ3Rlc3RjYWZlJyk7XG5cbmNvbnN0IG5hdGl2ZUF1dG9tYXRpb25Mb2dnZXIgICAgICAgICAgICAgICA9IHRlc3RjYWZlTG9nZ2VyLmV4dGVuZCgnbmF0aXZlLWF1dG9tYXRpb24nKTtcbmNvbnN0IHJlcXVlc3RQaXBlbGluZUxvZ2dlciAgICAgICAgICAgICAgICA9IG5hdGl2ZUF1dG9tYXRpb25Mb2dnZXIuZXh0ZW5kKCdyZXF1ZXN0LXBpcGVsaW5lJyk7XG5jb25zdCByZXF1ZXN0UGlwZWxpbmVDb250ZXh0TG9nZ2VyICAgICAgICAgPSByZXF1ZXN0UGlwZWxpbmVMb2dnZXIuZXh0ZW5kKCdjb250ZXh0Jyk7XG5jb25zdCByZXF1ZXN0UGlwZWxpbmVNb2NrTG9nZ2VyICAgICAgICAgICAgPSByZXF1ZXN0UGlwZWxpbmVMb2dnZXIuZXh0ZW5kKCdtb2NrJyk7XG5jb25zdCByZXF1ZXN0UGlwZWxpbmVJbnRlcm5hbFJlcXVlc3RMb2dnZXIgPSByZXF1ZXN0UGlwZWxpbmVMb2dnZXIuZXh0ZW5kKCdpbnRlcm5hbC1yZXF1ZXN0Jyk7XG5jb25zdCByZXF1ZXN0UGlwZWxpbmVTZXJ2aWNlUmVxdWVzdExvZ2dlciAgPSByZXF1ZXN0UGlwZWxpbmVMb2dnZXIuZXh0ZW5kKCdzZXJ2aWNlLXJlcXVlc3QnKTtcbmNvbnN0IHJlcXVlc3RQaXBlbGluZU90aGVyUmVxdWVzdExvZ2dlciAgICA9IHJlcXVlc3RQaXBlbGluZUxvZ2dlci5leHRlbmQoJ290aGVyLXJlcXVlc3QnKTtcbmNvbnN0IHJlc291cmNlSW5qZWN0b3JMb2dnZXIgICAgICAgICAgICAgICA9IG5hdGl2ZUF1dG9tYXRpb25Mb2dnZXIuZXh0ZW5kKCdyZXNvdXJjZS1pbmplY3RvcicpO1xuY29uc3QgcmVxdWVzdEhvb2tzTG9nZ2VyICAgICAgICAgICAgICAgICAgID0gbmF0aXZlQXV0b21hdGlvbkxvZ2dlci5leHRlbmQoJ3JlcXVlc3QtaG9va3MnKTtcbmNvbnN0IHJlcXVlc3RIb29rc0V2ZW50UHJvdmlkZXJMb2dnZXIgICAgICA9IHJlcXVlc3RIb29rc0xvZ2dlci5leHRlbmQoJ2V2ZW50LXByb3ZpZGVyJyk7XG5cbmNvbnN0IGJyb3dzZXJMb2dnZXIgICAgICAgICAgICAgICA9IHRlc3RjYWZlTG9nZ2VyLmV4dGVuZCgnYnJvd3NlcicpO1xuY29uc3QgYnJvd3NlclByb3ZpZGVyTG9nZ2VyICAgICAgID0gYnJvd3NlckxvZ2dlci5leHRlbmQoJ3Byb3ZpZGVyJyk7XG5jb25zdCBjaHJvbWVCcm93c2VyUHJvdmlkZXJMb2dnZXIgPSBicm93c2VyUHJvdmlkZXJMb2dnZXIuZXh0ZW5kKCdjaHJvbWUnKTtcblxuY29uc3QgcnVubmVyTG9nZ2VyID0gdGVzdGNhZmVMb2dnZXIuZXh0ZW5kKCdydW5uZXInKTtcblxuY29uc3QgdGVzdFJ1bkNvbnRyb2xsZXJMb2dnZXIgPSBydW5uZXJMb2dnZXIuZXh0ZW5kKCd0ZXN0LXJ1bi1jb250cm9sbGVyJyk7XG5cbmV4cG9ydCB7XG4gICAgbmF0aXZlQXV0b21hdGlvbkxvZ2dlcixcbiAgICByZXF1ZXN0UGlwZWxpbmVMb2dnZXIsXG4gICAgcmVzb3VyY2VJbmplY3RvckxvZ2dlcixcbiAgICBjaHJvbWVCcm93c2VyUHJvdmlkZXJMb2dnZXIsXG4gICAgcmVxdWVzdEhvb2tzRXZlbnRQcm92aWRlckxvZ2dlcixcbiAgICByZXF1ZXN0UGlwZWxpbmVNb2NrTG9nZ2VyLFxuICAgIHJlcXVlc3RQaXBlbGluZUludGVybmFsUmVxdWVzdExvZ2dlcixcbiAgICByZXF1ZXN0UGlwZWxpbmVTZXJ2aWNlUmVxdWVzdExvZ2dlcixcbiAgICByZXF1ZXN0UGlwZWxpbmVPdGhlclJlcXVlc3RMb2dnZXIsXG4gICAgcmVxdWVzdFBpcGVsaW5lQ29udGV4dExvZ2dlcixcbiAgICB0ZXN0UnVuQ29udHJvbGxlckxvZ2dlcixcbn07XG4iXX0=