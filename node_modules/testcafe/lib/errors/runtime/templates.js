"use strict";
// -------------------------------------------------------------
// WARNING: this file is used by both the client and the server.
// Do not use any browser or node-specific API!
// -------------------------------------------------------------
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
const error_hints_1 = __importDefault(require("../../browser/connection/error-hints"));
const string_1 = require("../../utils/string");
const skip_js_errors_option_names_1 = require("../../configuration/skip-js-errors-option-names");
const DOCUMENTATION_LINKS = {
    TEST_SOURCE_PARAMETER: 'https://testcafe.io/documentation/402639/reference/command-line-interface#file-pathglob-pattern',
    FILTER_SETTINGS: 'https://testcafe.io/documentation/402638/reference/configuration-file#filter',
    HEADLESS_MODE: 'https://testcafe.io/documentation/402828/guides/concepts/browsers#test-in-headless-mode',
    CUSTOM_ACTIONS: 'https://testcafe.io/documentation/404150/guides/advanced-guides/custom-test-actions',
};
exports.default = {
    [types_1.RUNTIME_ERRORS.cannotCreateMultipleLiveModeRunners]: 'Cannot launch multiple live mode instances of the TestCafe test runner.',
    [types_1.RUNTIME_ERRORS.cannotRunLiveModeRunnerMultipleTimes]: 'Cannot launch the same live mode instance of the TestCafe test runner multiple times.',
    [types_1.RUNTIME_ERRORS.browserDisconnected]: 'The {userAgent} browser disconnected. If you did not close the browser yourself, browser performance or network issues may be at fault.',
    [types_1.RUNTIME_ERRORS.cannotRunAgainstDisconnectedBrowsers]: 'The following browsers disconnected: {userAgents}. Cannot run further tests.',
    [types_1.RUNTIME_ERRORS.testRunRequestInDisconnectedBrowser]: '"{browser}" disconnected during test execution.',
    [types_1.RUNTIME_ERRORS.cannotEstablishBrowserConnection]: 'Cannot establish one or more browser connections.',
    [types_1.RUNTIME_ERRORS.cannotFindBrowser]: 'Cannot find the browser. "{browser}" is neither a known browser alias, nor a path to an executable file.',
    [types_1.RUNTIME_ERRORS.browserProviderNotFound]: 'Cannot find the "{providerName}" browser provider.',
    [types_1.RUNTIME_ERRORS.browserNotSet]: 'You have not specified a browser.',
    [types_1.RUNTIME_ERRORS.testFilesNotFound]: 'Could not find test files at the following location: "{cwd}".\n' +
        'Check patterns for errors:\n\n' +
        '{sourceList}\n\n' +
        'or launch TestCafe from a different directory.\n' +
        `For more information on how to specify test locations, see ${DOCUMENTATION_LINKS.TEST_SOURCE_PARAMETER}.`,
    [types_1.RUNTIME_ERRORS.noTestsToRun]: "Source files do not contain valid 'fixture' and 'test' declarations.",
    [types_1.RUNTIME_ERRORS.noTestsToRunDueFiltering]: 'No tests match your filter.\n' +
        `See ${DOCUMENTATION_LINKS.FILTER_SETTINGS}.`,
    [types_1.RUNTIME_ERRORS.multipleSameStreamReporters]: 'Reporters cannot share output streams. The following reporters interfere with one another: "{reporters}".',
    [types_1.RUNTIME_ERRORS.optionValueIsNotValidRegExp]: 'The "{optionName}" option does not contain a valid regular expression.',
    [types_1.RUNTIME_ERRORS.optionValueIsNotValidKeyValue]: 'The "{optionName}" option does not contain a valid key-value pair.',
    [types_1.RUNTIME_ERRORS.invalidQuarantineOption]: 'The "{optionName}" option does not exist. Specify "attemptLimit" and "successThreshold" to configure quarantine mode.',
    [types_1.RUNTIME_ERRORS.invalidQuarantineParametersRatio]: 'The value of "attemptLimit" ({attemptLimit}) should be greater then the value of "successThreshold" ({successThreshold}).',
    [types_1.RUNTIME_ERRORS.invalidAttemptLimitValue]: 'The "{attemptLimit}" parameter only accepts values of {MIN_ATTEMPT_LIMIT} and up.',
    [types_1.RUNTIME_ERRORS.invalidSuccessThresholdValue]: 'The "{successThreshold}" parameter only accepts values of {MIN_SUCCESS_THRESHOLD} and up.',
    [types_1.RUNTIME_ERRORS.invalidSpeedValue]: 'Speed should be a number between 0.01 and 1.',
    [types_1.RUNTIME_ERRORS.invalidConcurrencyFactor]: 'The concurrency factor should be an integer greater than or equal to 1.',
    [types_1.RUNTIME_ERRORS.cannotDivideRemotesCountByConcurrency]: 'The number of remote browsers should be divisible by the concurrency factor.',
    [types_1.RUNTIME_ERRORS.cannotSetConcurrencyWithCDPPort]: 'The value of the "concurrency" option includes the CDP port.',
    [types_1.RUNTIME_ERRORS.portsOptionRequiresTwoNumbers]: 'The "--ports" option requires two arguments.',
    [types_1.RUNTIME_ERRORS.portIsNotFree]: 'Port {portNum} is occupied by another process.',
    [types_1.RUNTIME_ERRORS.invalidHostname]: 'Cannot resolve hostname "{hostname}".',
    [types_1.RUNTIME_ERRORS.cannotFindSpecifiedTestSource]: 'Cannot find a test file at "{path}".',
    [types_1.RUNTIME_ERRORS.clientFunctionCodeIsNotAFunction]: 'Cannot initialize a ClientFunction because {#instantiationCallsiteName} is {type}, and not a function.',
    [types_1.RUNTIME_ERRORS.selectorInitializedWithWrongType]: 'Cannot initialize a Selector because {#instantiationCallsiteName} is {type}, and not one of the following: a CSS selector string, a Selector object, a node snapshot, a function, or a Promise returned by a Selector.',
    [types_1.RUNTIME_ERRORS.clientFunctionCannotResolveTestRun]: '{#instantiationCallsiteName} does not have test controller access. To execute {#instantiationCallsiteName} from a Node.js API callback, bind the test controller object to the function with the `.with({ boundTestRun: t })` method. Note that you cannot execute {#instantiationCallsiteName} outside test code.',
    [types_1.RUNTIME_ERRORS.requestCannotResolveTestRun]: '"request" does not have test controller access.',
    [types_1.RUNTIME_ERRORS.regeneratorInClientFunctionCode]: `{#instantiationCallsiteName} code, arguments or dependencies cannot contain generators or "async/await" syntax (use Promises instead).`,
    [types_1.RUNTIME_ERRORS.invalidClientFunctionTestRunBinding]: 'Cannot resolve the "boundTestRun" option because its value is not a test controller.',
    [types_1.RUNTIME_ERRORS.invalidValueType]: '{smthg} ({actual}) is not of expected type ({type}).',
    [types_1.RUNTIME_ERRORS.unsupportedUrlProtocol]: 'Invalid {what}: "{url}". TestCafe cannot execute the test because the {what} includes the {protocol} protocol. TestCafe supports the following protocols: http://, https:// and file://.',
    [types_1.RUNTIME_ERRORS.testControllerProxyCannotResolveTestRun]: `The action does not have implicit test controller access. Reference the 't' object to gain it.`,
    [types_1.RUNTIME_ERRORS.timeLimitedPromiseTimeoutExpired]: 'A Promise timed out.',
    [types_1.RUNTIME_ERRORS.cannotSetVideoOptionsWithoutBaseVideoPathSpecified]: 'You cannot manage advanced video parameters when the video recording capability is off. Specify the root storage folder for video content to enable video recording.',
    [types_1.RUNTIME_ERRORS.multipleAPIMethodCallForbidden]: 'You cannot call the "{methodName}" method more than once. Specify an array of parameters instead.',
    [types_1.RUNTIME_ERRORS.invalidReporterOutput]: "Specify a file name or a writable stream as the reporter's output target.",
    [types_1.RUNTIME_ERRORS.cannotReadSSLCertFile]: 'Unable to read the file referenced by the "{option}" ssl option ("{path}"). Error details:\n' +
        '\n' +
        '{err}',
    [types_1.RUNTIME_ERRORS.cannotPrepareTestsDueToError]: 'Cannot prepare tests due to the following error:\n' +
        '\n' +
        '{errMessage}',
    [types_1.RUNTIME_ERRORS.cannotParseRawFile]: 'Cannot parse a raw test file at "{path}" due to the following error:\n' +
        '\n' +
        '{errMessage}',
    [types_1.RUNTIME_ERRORS.testedAppFailedWithError]: 'The web application failed with the following error:\n' +
        '\n' +
        '{errMessage}',
    [types_1.RUNTIME_ERRORS.unableToOpenBrowser]: 'Unable to open the "{alias}" browser due to the following error:\n' +
        '\n' +
        '{errMessage}',
    [types_1.RUNTIME_ERRORS.requestHookConfigureAPIError]: 'Attempt to configure a request hook resulted in the following error:\n' +
        '\n' +
        '{requestHookName}: {errMsg}',
    [types_1.RUNTIME_ERRORS.forbiddenCharatersInScreenshotPath]: 'There are forbidden characters in the "{screenshotPath}" {screenshotPathType}:\n' +
        ' {forbiddenCharsDescription}',
    [types_1.RUNTIME_ERRORS.cannotFindFFMPEG]: 'TestCafe cannot record videos because it cannot locate the FFmpeg executable. Try one of the following solutions:\n' +
        '\n' +
        '* add the path of the FFmpeg installation directory to the PATH environment variable,\n' +
        '* specify the path of the FFmpeg executable in the FFMPEG_PATH environment variable or the ffmpegPath option,\n' +
        '* install the @ffmpeg-installer/ffmpeg npm package.',
    [types_1.RUNTIME_ERRORS.cannotReadConfigFile]: 'Failed to read the "{path}" configuration file from disk. Error details:\n' +
        '\n' +
        '{err}',
    [types_1.RUNTIME_ERRORS.cannotParseConfigFile]: 'Failed to parse the "{path}" configuration file. The file contains invalid JSON syntax. \n\nError details:\n' +
        '\n' +
        '{err}',
    [types_1.RUNTIME_ERRORS.cannotFindReporterForAlias]: 'Failed to load the "{name}" reporter. Please check the parameter for errors. Error details:\n' +
        '\n' +
        '{err}',
    [types_1.RUNTIME_ERRORS.cannotFindTypescriptConfigurationFile]: '"{filePath}" is not a valid TypeScript configuration file.',
    [types_1.RUNTIME_ERRORS.clientScriptInitializerIsNotSpecified]: 'Initialize your client script with one of the following: a JavaScript script, a JavaScript file path, or the name of a JavaScript module.',
    [types_1.RUNTIME_ERRORS.clientScriptBasePathIsNotSpecified]: 'Specify the base path for the client script file.',
    [types_1.RUNTIME_ERRORS.clientScriptInitializerMultipleContentSources]: 'Client scripts can only have one initializer: JavaScript code, a JavaScript file path, or the name of a JavaScript module.',
    [types_1.RUNTIME_ERRORS.cannotLoadClientScriptFromPath]: 'Cannot load a client script from {path}.\n{errorMessage}',
    [types_1.RUNTIME_ERRORS.clientScriptModuleEntryPointPathCalculationError]: 'A client script tried to load a JavaScript module that TestCafe cannot locate:\n\n{errorMessage}.',
    [types_1.RUNTIME_ERRORS.methodIsNotAvailableForAnIPCHost]: 'This method cannot be called on a service host.',
    [types_1.RUNTIME_ERRORS.tooLargeIPCPayload]: 'The specified payload is too large to form an IPC packet.',
    [types_1.RUNTIME_ERRORS.malformedIPCMessage]: 'Cannot process a malformed IPC message.',
    [types_1.RUNTIME_ERRORS.unexpectedIPCHeadPacket]: 'Cannot create an IPC message due to an unexpected IPC head packet.',
    [types_1.RUNTIME_ERRORS.unexpectedIPCBodyPacket]: 'Cannot create an IPC message due to an unexpected IPC body packet.',
    [types_1.RUNTIME_ERRORS.unexpectedIPCTailPacket]: 'Cannot create an IPC message due to an unexpected IPC tail packet.',
    [types_1.RUNTIME_ERRORS.cannotRunLocalNonHeadlessBrowserWithoutDisplay]: 'Your Linux installation does not have a graphic subsystem to run {browserAlias} with a GUI. ' +
        'You can launch the browser in headless mode. ' +
        'If you use a portable browser executable, ' +
        "specify the browser alias before the path instead of the 'path' prefix. " +
        `For more information, see ${DOCUMENTATION_LINKS.HEADLESS_MODE}`,
    [types_1.RUNTIME_ERRORS.uncaughtErrorInReporter]: 'The "{methodName}" method of the "{reporterName}" reporter produced an uncaught error. Error details:\n{originalError}',
    [types_1.RUNTIME_ERRORS.roleInitializedWithRelativeUrl]: 'You cannot specify relative login page URLs in the Role constructor. Use an absolute URL.',
    [types_1.RUNTIME_ERRORS.typeScriptCompilerLoadingError]: 'Cannot load the TypeScript compiler.\n{originErrorMessage}.',
    [types_1.RUNTIME_ERRORS.cannotCustomizeSpecifiedCompilers]: 'You cannot specify options for the {noncustomizableCompilerList} compiler{suffix}.',
    [types_1.RUNTIME_ERRORS.cannotEnableRetryTestPagesOption]: 'Cannot enable the \'retryTestPages\' option. Apply one of the following two solutions:\n' +
        '-- set the \'hostname\' option to \'localhost\'\n' +
        '-- run TestCafe over HTTPS\n',
    [types_1.RUNTIME_ERRORS.browserConnectionError]: '{originErrorMessage}\n{numOfNotOpenedConnection} of {numOfAllConnections} browser connections have not been established:\n{listOfNotOpenedConnections}\n\nHints:\n{listOfHints}',
    [error_hints_1.default.TooHighConcurrencyFactor]: 'The host machine may not be powerful enough to handle the specified concurrency factor ({concurrencyFactor}). ' +
        'Decrease the concurrency factor or allocate more computing resources to the host machine.',
    [error_hints_1.default.UseBrowserInitOption]: 'Increase the Browser Initialization Timeout if its value is too low (currently: {browserInitTimeoutMsg}). The timeout determines how long TestCafe waits for browsers to be ready.',
    [error_hints_1.default.RestErrorCauses]: 'The error can also be caused by network issues or remote device failure. Make sure that your network connection is stable and you can reach the remote device.',
    [types_1.RUNTIME_ERRORS.cannotFindTestcafeConfigurationFile]: 'Cannot locate a TestCafe configuration file at {filePath}. Either the file does not exist, or the path is invalid.',
    [types_1.RUNTIME_ERRORS.dashboardTokenInJSON]: 'Insecure token declaration: cannot declare a Dashboard token in a JSON configuration file. Use a JavaScript configuration file, or declare a Dashboard token with one of the following: the CLI, the Test Runner API, the TESTCAFE_DASHBOARD_TOKEN environment variable.',
    [types_1.RUNTIME_ERRORS.relativeBaseUrl]: 'The value of the baseUrl argument cannot be relative: "{baseUrl}"',
    [types_1.RUNTIME_ERRORS.requestUrlInvalidValueError]: 'The request url is invalid ({actualValue}).',
    [types_1.RUNTIME_ERRORS.requestRuntimeError]: 'The request was interrupted by an error:\n{message}',
    [types_1.RUNTIME_ERRORS.invalidSkipJsErrorsOptionsObjectProperty]: `The "{optionName}" option does not exist. Use the following options to configure skipJsErrors: ${(0, string_1.getConcatenatedValuesString)(Object.keys(skip_js_errors_option_names_1.SKIP_JS_ERRORS_OPTIONS_OBJECT_OPTION_NAMES))}.`,
    [types_1.RUNTIME_ERRORS.invalidSkipJsErrorsCallbackWithOptionsProperty]: `The "{optionName}" option does not exist. Use the following options to configure skipJsErrors callbacks: ${(0, string_1.getConcatenatedValuesString)(Object.keys(skip_js_errors_option_names_1.SKIP_JS_ERRORS_CALLBACK_WITH_OPTIONS_OPTION_NAMES))}.`,
    [types_1.RUNTIME_ERRORS.invalidCommandInJsonCompiler]: `TestCafe terminated the test run. The "{path}" file contains an unknown Chrome User Flow action "{action}". Remove the action to continue. Refer to the following article for the definitive list of supported Chrome User Flow actions: https://testcafe.io/documentation/403998/guides/experimental-capabilities/chrome-replay-support#supported-replay-actions`,
    [types_1.RUNTIME_ERRORS.invalidCustomActionsOptionType]: `The value of the customActions option does not belong to type Object. Refer to the following article for custom action setup instructions: ${DOCUMENTATION_LINKS.CUSTOM_ACTIONS}`,
    [types_1.RUNTIME_ERRORS.invalidCustomActionType]: `TestCafe cannot parse the "{actionName}" action, because the action definition is invalid. Format the definition in accordance with the custom actions guide: ${DOCUMENTATION_LINKS.CUSTOM_ACTIONS}`,
    [types_1.RUNTIME_ERRORS.cannotImportESMInCommonsJS]: 'Cannot import the {esModule} ECMAScript module from {targetFile}. Use a dynamic import() statement or enable the --esm CLI flag.',
    [types_1.RUNTIME_ERRORS.setNativeAutomationForUnsupportedBrowsers]: 'The "{browser}" do not support the Native Automation mode. Use the "disable native automation" option to continue.',
};
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,